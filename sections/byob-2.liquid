{% comment %}
  Build Your Own Bundle Section — v2 (with thumbnail strip + Alpine‑friendly cart drawer)
{% endcomment %}

<section class="bundle-builder" data-min="{{ section.settings.min_products }}">
  {% assign bundle_collection = section.settings.collection %}

  {% if bundle_collection != nil %}
    <div class="bundle-builder-grid">
      {% for product in bundle_collection.products limit: section.settings.products_limit %}
        {% assign first_variant = product.variants.first %}
        <div class="product-card"
             data-variant-id="{{ first_variant.id }}"
             data-image-url="{{ product.featured_image | img_url: '100x' }}">
          <img src="{{ product | img_url: '400x' }}" alt="{{ product.title }}" loading="lazy">

          <div class="info">
            <p class="title">{{ product.title }}</p>
            <p class="price">{{ product.price | money }}</p>
            <button class="bundle-btn" type="button">Add to Bundle</button>
          </div>
        </div>
      {% endfor %}
    </div>
  {% else %}
    <p class="text-center">No collection selected.</p>
  {% endif %}

  <!-- Sticky thumbnail strip & CTA -->
  <div id="bundle-progress-bar" aria-live="polite">
    <div class="items" id="bundle-items"></div>

    <div class="summary">
      <span class="progress-text">0/{{ section.settings.min_products }} selected</span>
      <button id="bundle-checkout" disabled>Add Bundle to Cart</button>
    </div>
  </div>
</section>

<style>
  :root {
    --cards-mobile: {{ section.settings.cards_mobile }};
    --cards-desktop: {{ section.settings.cards_desktop }};
  }

  /* --- Grid --- */
  .bundle-builder-grid {
    display: grid;
    grid-template-columns: repeat(var(--cards-mobile), 1fr);
    gap: 1rem;
  }
  @media (min-width: 768px) {
    .bundle-builder-grid {
      grid-template-columns: repeat(var(--cards-desktop), 1fr);
    }
  }

  /* --- Product card --- */
  .product-card {
    background:#fff;border-radius:12px;box-shadow:0 1px 6px rgb(0 0 0 / 5%);
    display:flex;flex-direction:column;overflow:hidden;transition:transform .2s;
  }
  .product-card:hover { transform:translateY(-3px); }
  .product-card img { width:100%; height:auto; object-fit:cover; }
  .product-card .info { padding:0.75rem; display:flex; flex-direction:column; flex:1; }
  .product-card .title { font-weight:600; font-size:0.95rem; margin-bottom:0.25rem; }
  .product-card .price { font-size:0.9rem; color:#3c3c3c; margin-bottom:0.5rem; }

  /* --- CTA button tweaks --- */
  .bundle-btn {
    background:transparent;
    color:#000;
    font-size:0.85rem;
    padding:0.5rem 0;
    border:1px solid #000; /* thin border */
    border-radius:8px;
    cursor:pointer;
    width:100%;
    transition:background 0.25s, color 0.25s;
  }
  .bundle-btn.selected {
    background:#1e90ff;
    color:#fff;
    border-color:#1e90ff;
  }

  /* --- Sticky footer --- */
  #bundle-progress-bar {
    position:fixed;left:0;right:0;bottom:0;
    padding:0.75rem 1rem;background:#fff;box-shadow:0 -1px 10px rgb(0 0 0 / 10%);z-index:30;
  }
  #bundle-progress-bar .items {
    display:flex;align-items:center;gap:0.5rem;overflow-x:auto;margin-bottom:0.5rem;
  }
  .thumbnail {
    position:relative;width:40px;height:40px;flex:0 0 auto;
  }
  .thumbnail img { width:100%;height:100%;object-fit:cover;border-radius:4px; }
  .thumbnail button {
    position:absolute;top:-6px;right:-6px;width:16px;height:16px;
    border-radius:50%;border:1px solid #aaa;background:#fff;font-size:12px;line-height:14px;padding:0;cursor:pointer;
  }

  #bundle-progress-bar .summary { display:flex;justify-content:space-between;align-items:center;font-size:0.9rem; }
  #bundle-checkout {
    background:#1e90ff;color:#fff;border:none;border-radius:8px;padding:0.5rem 1rem;cursor:pointer;transition:opacity 0.25s;
  }
  #bundle-checkout:disabled { opacity:0.45;cursor:not-allowed; }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const minRequired = {{ section.settings.min_products | json }};
    const selected    = new Map(); // variantId -> { img }

    const itemsContainer = document.getElementById('bundle-items');
    const progressText   = document.querySelector('#bundle-progress-bar .progress-text');
    const checkoutBtn    = document.getElementById('bundle-checkout');

    function renderItems() {
      itemsContainer.innerHTML = '';
      selected.forEach(({ img }, variantId) => {
        const thumb = document.createElement('div');
        thumb.className = 'thumbnail';
        thumb.dataset.variantId = variantId;
        thumb.innerHTML = `<img src="${img}" alt="">\n           <button aria-label="Remove" class="remove">×</button>`;
        itemsContainer.appendChild(thumb);
      });
    }

    function updateUI() {
      const count = selected.size;
      progressText.textContent = `${count}/${minRequired} selected`;
      checkoutBtn.disabled = count < minRequired;
      renderItems();
    }

    // Toggle selection on card button
    document.querySelectorAll('.bundle-btn').forEach(btn => {
      btn.addEventListener('click', () => {
        const card       = btn.closest('.product-card');
        const variantId  = card.dataset.variantId;
        const imageUrl   = card.dataset.imageUrl;

        if (selected.has(variantId)) {
          selected.delete(variantId);
          btn.classList.remove('selected');
          btn.textContent = 'Add to Bundle';
        } else {
          selected.set(variantId, { img: imageUrl });
          btn.classList.add('selected');
          btn.textContent = 'Added';
        }
        updateUI();
      });
    });

    // Remove thumbnail via event delegation
    itemsContainer.addEventListener('click', e => {
      if (e.target.matches('.remove')) {
        const thumb = e.target.closest('.thumbnail');
        const variantId = thumb.dataset.variantId;
        selected.delete(variantId);

        // unselect corresponding card button
        const cardBtn = document.querySelector(`.product-card[data-variant-id="${variantId}"] .bundle-btn`);
        if (cardBtn) {
          cardBtn.classList.remove('selected');
          cardBtn.textContent = 'Add to Bundle';
        }
        updateUI();
      }
    });

    async function addVariant(variantId) {
      return fetch('/cart/add.js', {
        method:'POST',
        headers:{ 'Content-Type':'application/json' },
        body:JSON.stringify({ id:variantId, quantity:1 })
      });
    }

    checkoutBtn.addEventListener('click', async () => {
      checkoutBtn.disabled = true;
      await Promise.all([...selected.keys()].map(id => addVariant(id)));

      /* ---- Open Cart Drawer (Alpine.js theme) ---- */
      // Many Alpine‑driven themes dispatch a global event the drawer listens to.
      window.dispatchEvent(new CustomEvent('cart:open'));

      // If your theme uses a store or method, you can call it here. Example:
      // if (window.$store && $store.cart) { $store.cart.open() }
    });

    updateUI();
  });
</script>

{% schema %}
{
  "name": "Build Your Own Bundle v2",
  "tag": "section",
  "class": "section bundle-builder",
  "settings": [
    { "type": "collection", "id": "collection", "label": "Product collection" },
    { "type": "range", "id": "cards_mobile", "label": "Cards per row on mobile", "min": 1, "max": 3, "step": 1, "default": 2 },
    { "type": "range", "id": "cards_desktop", "label": "Cards per row on desktop", "min": 2, "max": 5, "step": 1, "default": 4 },
    { "type": "range", "id": "products_limit", "label": "Maximum products to display", "min": 4, "max": 50, "step": 1, "default": 12 },
    { "type": "number", "id": "min_products", "label": "Minimum products required for bundle discount", "default": 3 }
  ],
  "presets": [ { "name": "Build Your Own Bundle" } ]
}
{% endschema %}
